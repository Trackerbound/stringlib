fn slib_split($string, $substring) {
    /*
    Returns a container with the elements split from the string by the delimeter string.

    Arguments:
        $string (str): string to slice.
        $substring (str): delimeter string.

    Returns:
        $matches (container): split elements.
    */

    $new_str = ""
    $new_str[0] = 0

    $match_len = 0
    $matchqty = 0

    for($idx = 0; $idx < strlen($string); $idx + 1) {
        if $string[$idx] == $substring[$match_len] {
            $match_len = $match_len + 1
        } else {
            $match_len = 0;
        }
        if $match_len == strlen($substring) {
            $matchqty = $matchqty + 1
        }
    }

    $matchindexes = new($matchqty, 1, INT32)
    clean($matchindexes, 0)
    $matchqty = 0

    for($idx = 0; $idx < strlen($string); $idx + 1) {
        if $string[$idx] == $substring[$match_len] {
            $match_len = $match_len + 1
        } else {
            $match_len = 0;
        }
        if $match_len == strlen($substring) {
            $matchindexes[$matchqty] = $idx + 1
            $matchqty = $matchqty + 1
        }
    }

    $matches = new($matchqty + 1, 1)
    $matches_idx = 0

    for($match_idx = 0; $match_idx <= $matchqty; $match_idx + 1) {
        $sliced[0] = 0

        $start = $matchindexes[$match_idx - 1]
        $diff = strlen($substring)
        if $match_idx == $matchqty {
            $end = strlen($string)
        } else {
            $end = $matchindexes[$match_idx] - $diff
        }

        $sliced = stringlib.slice($string, $start, $end)
        $matches[$match_idx] = clone($sliced)
        $matches_idx = $matches_idx + 1
    }
    ret($matches)
}